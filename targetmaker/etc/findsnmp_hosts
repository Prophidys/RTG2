#!/usr/local/bin/perl
# $Id: findsnmp_hosts,v 1.1 2008/01/19 03:22:14 btoneill Exp $
#
#

use Sys::Hostname;
use LWP::Simple qw($ua get getprint);



$hostname = hostname();

$CONFIG_FILE = "/opt/rtg/targetmaker/etc/targetmaker.cfg";
die "Cannot find file $CONFIG_FILE, exiting...\n" unless -f $CONFIG_FILE;
require $CONFIG_FILE;

use lib "/opt/rtg/etc";
use BER;
use SNMP_Session;
use SNMP_util;
use Net::Ping;
use Socket;
use File::Copy;

sub gethostsfromservice($) {
        my $sg = shift;
        my @hostlist;

        @hostlist = ();

	my $url = "http://$NAGIOSUSER:$NAGIOSPASS\@$NAGIOSSRV/$NAGIOSDIR/$STATUSCGI?servicegroup=$sg&style=overview";

	my $text = get($url);
#        $text = get("http://$NAGIOSUSER:$NAGIOSPASS\@$NAGIOSSRV/$NAGIOSDIR/$STATUSCGI?servicegroup=$sg&style=overview");

        @foo = split('\n',$text);

        foreach $line (@foo) {
                chomp;
                if($line =~ /\<a href\=\'status\.cgi\?host\=(.+?)\'\>/) {
                        push(@hostlist,$1);
                }
        }

        return @hostlist;
}



open(FILE,"$NETWORK_LIST") || die "Can't open file: $NETWORK_LIST\n";

while(<FILE>) {
	chomp;
	next if(/^\s*#/);
	next if(/^\s*$/);
	s/(\s*#.*)//; 	# remote any comments at the end of the line

	($network_num,$ips) = split(":",$_);
	$networks{$network_num} = $ips;

}

close FILE;


$timeout = "1";
#$mib = ".1.3.6.1.2.1.1.1.0"; # sysDescr.0 object
$mib = ".1.3.6.1.2.1.1.5.0"; # sysName.0 object
$comm = $community;

$tmp_output = $router_file.".findsnmp_hosts";

if($NAGIOSSRV ne "") {
	print "Getting server list from Nagios...\n" if $INFO;
	my @nagios_list = gethostsfromservice($NAGIOSSG);
	foreach $hostname (@nagios_list) {
	    print "Checking $hostname..." if $DEBUG;
            $SNMP_Session::suppress_warnings=2;
            my @result = snmpget ("$comm\@$hostname:$SNMP_PORT:1:1::", $mib);
            # turn warnings back on
            $SNMP_Session::suppress_warnings=0;

            if($result[0] ne "") {
                $sysname = lc($result[0]);
                print ", w/snmp [$sysname], adding\n" if $DEBUG;
                push(@{$sysname_a{$sysname}},$hostname);
            } 
#	    $host_list{$hostname} = $hostname;
	}
	print "Nagios server list read...\n" if $INFO;
}

print "Reading template host file...\n" if $INFO;

open(FILE,"$HOST_TEMPLATE") || die "Can't open file $HOST_TEMPLATE: $!\n";

while(<FILE>) {
	chomp;
	next if(/^\s*#/);
	next if(/^\s*$/);
	s/(\s*#.*)//; 	# remote any comments at the end of the line
	if(@foo = split(":",$_)) {
		$args = "";
		$hostname = shift @foo;
		if($#foo >= 0) { 
			$args = ":".join(":",@foo); 
		}
	        print "Checking $hostname..." if $DEBUG;
		$SNMP_Session::suppress_warnings=2;
		my @result = snmpget ("$comm\@$hostname:$SNMP_PORT:1:1::", $mib);
		# turn warnings back on
		$SNMP_Session::suppress_warnings=0;
		if($result[0] ne "") {
                    $sysname = lc($result[0]);
		    print ", w/snmp [$sysname], adding\n" if $DEBUG;
                    push(@{$sysname_a{$sysname}},$hostname);
                } else {
	            print ", wo/snmp, skipping\n" if $DEBUG;
		}

		#$host_list{$hostname} = "$hostname$args";
	}
}
print "Template host file read.\n" if $INFO;

close FILE;

print "Scanning network...\n" if $INFO;

foreach $net (sort keys %networks) {

	($start_ip,$end_ip) = $networks{$net} =~ /(\d+)\-(\d+)/;
	$x = $start_ip;
	while($x <= $end_ip) {
		$host = "$net.".$x++;
		$iaddr = inet_aton($host); 
		$name  = gethostbyaddr($iaddr, AF_INET);
		($hostname) = $name =~ /(.+?)\..+/;

		print "Checking $host..." if $DEBUG;

		# if we only want to poll resolveable hosts
		if($hostname eq "") {
			if($FORCE_RESOLVE) {
				print "\tunresolvable, skipping...\n" if $DEBUG;
				next;	
			} else {
				print "\tunresolvable, using ip" if $DEBUG;
				$hostname = $host;
			}
		} else {
				print "\tresolves" if $DEBUG;
		}

		# we ping to make sure the host is alive
		#$p = Net::Ping->new($PING_HOSTS);
		$p = Net::Ping->new($PING_HOSTS);
		if($p->ping($host,$timeout)) {
			print ", pingable" if $DEBUG;
			$SNMP_Session::suppress_warnings=2;
			my @result = snmpget ("$comm\@$host:$SNMP_PORT:1:1::", $mib);
			# turn warnings back on
			$SNMP_Session::suppress_warnings=0;
			if($result[0] ne "") {
#				$host_list{$hostname} = $hostname;
                                $sysname = lc($result[0]);
				print ", w/snmp [$sysname], adding\n" if $DEBUG;
                                push(@{$sysname_a{$sysname}},$hostname);

			} else {
				print ", wo/snmp, skipping\n" if $DEBUG;
			}

		} else {
			print ", dead, skipping\n" if $DEBUG;
		}
		$p->close();
	}
}

print "Network scan complete.\n" if $INFO;

print "Creating output file...\n" if $INFO;

open(FILE,">$tmp_output") || die "Can't open file $tmp_output: $!\n";

print FILE "###############################################################\n";
print FILE "# WARNING!!!!!!\n";
print FILE "# DO NOT EDIT!!!!!\n";
print FILE "#\n";
print FILE "# Autogenerated by $0\n";
print FILE "# Create on: ".localtime()."\n";
print FILE "#\n";
print FILE "# If you need to add hosts manually, please edit $HOST_TEMPLATE.\n";
print FILE "###############################################################\n";

foreach $sysname (sort keys %sysname_a) {
    undef @foo;
    @in = @{$sysname_a{$sysname}};
    undef %saw;
    @foo = grep(!$saw{$_}++, @in);
    if($#foo >= 1) {
        $num_mem = $#foo + 1;
        print "WARNING $sysname has $num_mem members: ";
        foreach $member (@foo) {
            print "[$member] ";
        }
        print "\n";
    }
    print FILE "$foo[0]\n";
}
#foreach(sort keys %host_list) {
#    print FILE "$host_list{$_}\n";
#}

close FILE;

$router_file_old = "$router_file.previous";

#
# we might or might not want to automatically replace the routers file
#
if($REPLACE_ROUTERS > 0 ) {
	print "Moving $router_file to $router_file_old\n" if $DEBUG;
	move($router_file,$router_file_old);
	print "Moving $tmp_output to $router_file\n" if $DEBUG;
	move($tmp_output,$router_file);
	$final_file = $router_file;
} else {
	$final_file = $tmp_output;
}

print "New file is now available at $final_file\n" if $INFO;
print "Done.\n" if $INFO;

exit 0;

