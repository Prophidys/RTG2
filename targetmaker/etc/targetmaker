#! /usr/bin/perl
# 
# RTG Target File Generator 
#
########################################################################
# $Header: /cvsroot/rtg/rtg/targetmaker/etc/targetmaker,v 1.1 2008/01/19 03:22:14 btoneill Exp $
# $Revision: 1.1 $
# $Author: btoneill $
# $DateTime: 2007/11/30 10:17:06 $
########################################################################

use vars qw($community $defbits $output $DEBUG $DBOFF $INFO @ISA @EXPORT %timer_hash $TIMINGDEBUG);

use Sys::Hostname;
use Time::HiRes qw(clock_gettime);
my $hostname = hostname();

$timer_hash{'app_runtime'} = clock_gettime();

#########################################################################
# Local customization

$CONFIG_FILE = "/opt/rtg/targetmaker/etc/targetmaker.cfg";
die "Cannot find file $CONFIG_FILE, exiting...\n" unless -f $CONFIG_FILE;
require $CONFIG_FILE;

@configs = ($RTG_CONF_FILE, "rtg.conf", "/usr/local/rtg/etc/rtg.conf", "/etc/rtg.conf","/opt/rtg/etc/rtg.conf");

##
## Settings now moved to the $CONFIG_FILE
##


# No edits needed beyond this point
#########################################################################

# SNMP vars
$snmp_port   = $SNMP_PORT;
$snmp_ver    = $SNMP_VER;
$snmp_timeout= 1;
$snmp_retries= 2;
$snmp_backoff= 2;
$SNMP_Session::debug = 10;

# keep only until fixed in parsing of targets file
$OOR = 93750000000;


@standard_modules = ("StandardIf.pl");


# This Perl script requires the included SNMP modules
use lib "/opt/rtg/etc";
use BER;
use SNMP_Session;
use SNMP_util;
use File::Copy;

# This Perl script requires the not-included DBI module
use DBI;
use Getopt::Long;
use Net::Ping;

use vars qw(%snmp_modules %table_map %table_name %table_class @statclasses %statbit %statvalue $currentclass $system);


$TIMINGDEBUG=0;

# This Perl script requires the not-included DBI module
use DBI;


# Parse options:
Getopt::Long::Configure("permute", "pass_through");
if (!GetOptions("help+" => \$help,
		"debug" => \$DEBUG,
		"routers=s" => \$router_file,
		"output=s" => \$output,
		"bits=s" => \$defbits,
		"config=s@" => \@configs,
                "update" => \$UPDATETARGETS,
		)) {
	usage();
	die "Bad arguments";
}

if ( $help==1 ) { usage(); exit(0); }

sub usage {
	print STDERR "$0 [--routers <routersfile>] [--config <rtg.conf>] [--bits <defaultbits>] [--output <targets.cfg>] --debug\n";
}

#
# stores temporary output file in your TMPDIR environment variable if
# it exists, if not it will look to see if /tmp exists, if it does it will
# use that, if not it will create a temporary file in the cwd.
#
if($ENV{'TMPDIR'}) { $tempfile = $ENV{'TMPDIR'}."/targetmaker.tmp.$$"; }
elsif(-d "/tmp") { $tempfile = "/tmp/targetmaker.tmp.$$"; }
else { $tempfile = "./targetmaker.tmp.$$"; }


#
# Load all the modules we find
#
opendir(DIR,$MODULEDIR);
foreach $found_file (grep { /.*\.pl$/} readdir(DIR)) {
	# if it's extended mode, we add all files
	if($EXTENDEDMODE) {
		push(@modfiles,$found_file);
	}
	else {
		# if it's standard, we only add requested files
		if(grep { /$found_file$/ } @standard_modules) {
			push(@modfiles,$found_file);
		}
	}
}
closedir(DIR);

# Load all the added modules
foreach $mod_file (@modfiles) {
	debug("Now loading module $mod_file...");
	require "$MODULEDIR/$mod_file";
};



# List of "reserved" interfaces, i.e. those we don't care to monitor
# This list is inclusive of only Cisco/Juniper/Extreme
@reserved = (
    "tap",  "pimd", "pime", "ipip", "lo",
    "lo0",  "gre",  "pd-",  "pe-",  "gr-", "ip-",
    "vt-",  "mt-",  "mtun", "Null", "Loopback", "aal5",
    "-atm", "sc0", "T1", "Voice", 
    # these are for Extreme. The VLAN 000 is because no stats show up in
    # their VLAN interfaces, and they are all 000x for numbering
    "802.1Q", "rif", "VLAN 000",
    # for LNS's
    "Virtual-Access",
    "Dialer",
    "INBAND", "Controller5","sl0",
);

foreach $conf (@configs) {
  if (open CONF, "<$conf") {
    print "Reading [$conf].\n" if $DEBUG;
    while ($line = <CONF>) {
      @cVals = split /\s+/, $line;
      if ($cVals[0] =~ /DB_Host/) {
        $db_host=$cVals[1];
      } elsif ($cVals[0] =~ /DB_User/) {
        $db_user=$cVals[1];
      } elsif ($cVals[0] =~ /DB_Pass/) {
        $db_pass=$cVals[1];
      } elsif ($cVals[0] =~ /DB_Database/) {
        $db_db=$cVals[1];
      } elsif ($cVals[0] =~ /Interval/) {
        $interval=$cVals[1];
      } elsif ($cVals[0] =~ /SNMP_Port/) {
	$snmp_port=$cVals[1];
      } elsif ($cVals[0] =~ /SNMP_Ver/) {
	$snmp_ver=$cVals[1];
      }
    }
    last;
  }
}


sub find_interface_id($$$$);
sub debug($);
sub print_target($$$$$$$$);
sub process_classes(@);
sub has_class($);
sub add_class($);
sub hasoid($$$);
sub getrouterbits($);
sub rtg_snmpget($$);
sub set_inactive($);
sub create_table($$);
sub create_target_from_sql();

#
# Makes things easier with debugging from
# modules, even tho it's not as fast as doing
# the if $DEBUG before calling debug()
#
sub debug($) {
	$debug_line = shift;

	return 1 if($debug_line =~ /^Class:/ & $DEBUGCLASS == 0);

	print "$debug_line\n" if $DEBUG;
}

#
# create the entire targets file from the SQL
# database. Great for updates without repolling
# everything
#
sub create_target_from_sql() {
    
    my $sth;

    debug("Writing config file...");
    my $sql = "SELECT * from router_snmp_table ORDER BY rid";
    $sth = $dbh->prepare($sql);
    $sth->execute;

    while(my @row = $sth->fetchrow_array) {
        my $rid = $row[0];
        my $router = $row[1];
        my $ip = $row[2];
        my $community = $row[3];
        my $snmp_ver = $row[4];

        print CFG "# START $router\n";
        print CFG "host $ip {\n";
        print CFG "\tcommunity $community;\n";
        print CFG "\tsnmpver $snmp_ver;\n";
        $sql = "SELECT * from oid_table where rid=$rid ORDER BY id";
        my $sth2 = $dbh->prepare($sql);
        $sth2->execute;
        while(my @row2 = $sth2->fetchrow_array) {
            print CFG "\ttarget $row2[1] {\n";
            print CFG "\t\tbits $row2[2];\n";
            print CFG "\t\ttable $row2[3];\n";
            print CFG "\t\tid $row2[4];\n";
            if($row2[5] =~ /^\d+$/) {
                print CFG "\t\tspeed $row2[5];\n";
            }
            else {
                print CFG "\t\tspeed $OOR;\n";
            }
            print CFG "\t\tdescr \"$row2[6]\";\n";
            print CFG "\t};\n";
        }


        print CFG "};\n";
        print CFG "# END $router\n";
        $sth2->finish;
    }

    $sth->finish;

}

#
# get counter bits from config file to module that
# needs it
# 
sub getrouterbits($) {
	my $routername = shift;
	return $counterBits{$routername};

}

#
# creates tables
#
sub create_table($$) {
    my ($mib,$rid) = @_;

    my $rv = table_exists($mib."_$rid");
    if( $rv == 0) {
        my $start_time = clock_gettime();
        my $table_name = $mib."_$rid";
	if($DB_TYPE =~ /postgres/i) {
	    $sql = "CREATE TABLE $mib"."_$rid
                       (id int NOT NULL default '0',
                       dtime timestamp NOT NULL,
                       counter bigint NOT NULL default '0',
                       rate real NOT NULL default '0.0');
                    CREATE INDEX $mib"."_$rid". "_idx ON $mib"."_$rid (dtime)";
	} else {
	    $sql = "CREATE TABLE $mib"."_$rid 
            (id INT NOT NULL, dtime DATETIME NOT NULL, counter BIGINT NOT NULL, 
            rate BIGINT, KEY $mib"."_$rid". "_idx (dtime))";
	}
#        $sql = "CREATE TABLE $table_name (id INT NOT NULL, dtime INT NOT NULL, counter INT NOT NULL, rate INT)";
#        $sql = "CREATE TABLE $table_name (id INT NOT NULL, dtime INT NOT NULL, counter NUMBER(21) NOT NULL, rate INT)";
        &sql_insert($sql);
        #$sql = "CREATE TABLE $mib"."_$rid (id INT NOT NULL, dtime INT NOT NULL, counter BIGINT NOT NULL, rate BIGINT, KEY $mib"."_$rid". "_idx (dtime), KEY $mib"."_$rid". "_ididx (id))";
        #$sql = "CREATE TABLE $mib"."_$rid (id INT NOT NULL, dtime INT NOT NULL, counter BIGINT NOT NULL, KEY $mib"."_$rid". "_idx (dtime), KEY $mib"."_$rid". "_ididx (id))";
        #$sql = "CREATE INDEX ".$table_name."_idx on $table_name (id,dtime) COMPRESS 2";
#        $sql = "CREATE UNIQUE INDEX ".$table_name."_idx on $table_name (id,dtime) TABLESPACE $INDEX_TS PCTFREE 20 INITRANS 2";
#        &sql_insert($sql);

        my $end_time = clock_gettime();
        my $total_time = $end_time - $start_time;

        $timer_hash{'createtable_time'} += $total_time;
        $timer_hash{'createtable_num'}++;

    }

}

#
# If people use this instead of doing it themselves in their
# code, it makes it easier to change later on
#
sub print_target($$$$$$$$) {
    my ($router,$oid,$bits,$community,$table,$iid,$speed,$descr) = @_;

    my $start_time = clock_gettime();

    if($CREATE_TABLE2IID) {
        update_tableid_mappings($table,$iid);
    }
  
    $descr =~ s/\"//g;

    ($a,$a,$a,$a,@addrs) = gethostbyname($router);

    if($STORETARGETINSQL && !$FINALWRITE) {
        $rid = find_router_id($router);
        $descr =~ s/\'/\'\'/g;
        $sql = "INSERT INTO oid_table (rid,oid,bits,tablename,id,speed,descr) VALUES \
                ($rid,'$oid',$bits,'$table',$iid,'$speed','$descr')";
        &sql_insert($sql);

    } else {
        if($TARGETTYPE >= 0.8) {
            print CFG "\ttarget $oid {\n";
            print CFG "\t\tbits $bits;\n";
            print CFG "\t\ttable $table;\n";
            print CFG "\t\tid $iid;\n";
            if($speed =~ /^\d+$/) {
                print CFG "\t\tspeed $speed;\n";
            }
            else {
                print CFG "\t\tspeed $OOR;\n";
            }
            print CFG "\t\tdescr \"$descr\";\n";
            print CFG "\t};\n";

        } else {
            ($a,$a,$a,$a,@addrs) = gethostbyname($router);
            printf CFG "%d.%d.%d.%d\t", unpack('C4',$addrs[0]);
            print CFG "$oid\t";
            print CFG "$bits\t";
            print CFG "$community\t";
            print CFG "$table\t";
            print CFG "$iid\t";
            if($speed ne "") {
                print CFG "$speed\t";
            }
            print CFG "$descr\n";
        }
    }

    $timer_hash{'printtarget_time'} += clock_gettime() - $start_time;
    $timer_hash{'printtarget_num'}++;

}

sub update_tableid_mappings($$) {
    my($table_name,$iid) = @_;
    my $sth;

    if($DB_TYPE =~ /mysql/i) {
        $sql = "SELECT * FROM table2iid_mapping WHERE tablename='$table_name' AND id='$iid'";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
    } elsif($DB_TYPE =~ /oracle/i) {
        $sql = "SELECT * FROM table2iid_mapping WHERE tablename=:tablename AND id=:iid";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
        $sth->bind_param(":tablename",$table_name);
        $sth->bind_param(":iid",$iid);
    } elsif($DB_TYPE =~ /postgres/i) {
        $sql = "SELECT * FROM table2iid_mapping WHERE tablename='$table_name' AND id='$iid'";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
    }

    my $rv = $sth->execute
      or die "can't execute the query: $sth->errstr\n";
    my @rows = $sth->fetchall_arrayref();
    if ( $sth->rows == 0 ) {
        print "No iid/tablename found for $table_name/$iid...";
        $sql = "INSERT INTO table2iid_mapping (tablename,id,dtime) VALUES('$table_name','$iid','".time."')";
        print "adding.\n";
        &sql_insert($sql);
    }
    else {
        $sql = "UPDATE table2iid_mapping SET dtime='".time."' WHERE tablename='$table_name' AND id='$iid'";
        &sql_insert($sql);
    }

    $sth->finish;

}

# DBI SQL Insert Subroutine
sub sql_insert {
    ($sql) = @_;

#    if($DB_TYPE =~ /mysql/i) {
#        if($sql =~ /^CREATE/i) { $sql = "$sql TYPE=$STORAGE_TYPE"; }
#    }

    debug("SQL-: $sql");
    my $start_time = clock_gettime();
    my $sth = $dbh->prepare($sql)
      or die "Can't prepare $sql: $dbh->errstr\n";
    my $rv = $sth->execute
      or die "can't execute the query: $sth->errstr\n";
    my $end_time = clock_gettime();
    my $total_time = $end_time - $start_time;
    $timer_hash{'sqlinsert_time'} += $total_time;
    $timer_hash{'sqlinsert_num'}++;
}

# Find an RTG router id (rid) in the MySQL database.  If it doesn't
# exist, create a new entry and corresponding tables.
sub find_router_id {
    ($router) = @_;

    my $sth;

    if($DB_TYPE =~ /mysql/i) {
        $sql = "SELECT rid FROM router WHERE name='$router'";
        debug("SQL: $sql");
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
    } elsif($DB_TYPE =~ /oracle/i) {
        $sql = "SELECT rid FROM router WHERE name=:router";
        debug("SQL: $sql");
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
        $sth->bind_param(":router",$router);
    } elsif($DB_TYPE =~ /postgres/i) {
        $sql = "SELECT rid FROM router WHERE name='$router'";
        debug("SQL: $sql");
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
    }
    my $rv = $sth->execute
      or die "can't execute the query: $sth->errstr\n";
    ($rid) = $sth->fetchrow_array();
    $sth->finish;
    unless ( $rid > 0 ) {
        print "No router id found for $router...";
        if($DB_TYPE =~ /mysql/i) {
            $sql = "INSERT INTO router (rid,name) VALUES(0,'$router')";
        } elsif($DB_TYPE =~ /oracle/i) {
            $sql = "INSERT INTO router (rid,name) VALUES(router_seq.nextval,'$router')";
        } elsif($DB_TYPE =~ /postgres/i) {
            $sql = "INSERT INTO router (name) VALUES('$router')";
	}
        print "adding.\n";
        &sql_insert($sql);
        $rid = &find_router_id($router);
    }
    
    return $rid;
}

#
# Does a table exist?
#
sub table_exists($) {
    my $table_name = shift;
    my $sth;
    my $num_rows;
    my $rv;
    
    my $start_time = clock_gettime();
   
    # 
    # If a table doesn't exist it sends out icky
    # error messagse to stdout, we don't wnt this
    # as it will happen alot, so we turn off printing
    # of DBI errors
    #
    my $print_error_status = $dbh->{PrintError};
    $dbh->{PrintError} = 0;

    #
    # We use the show index command to see if
    # a table exists as it's around 50x faster then
    # doing a show table status on a large installation
    #
    if($DB_TYPE =~ /mysql/i) {
        $sql = "SHOW INDEX FROM $table_name";
        $sth = $dbh->prepare($sql);
    } elsif($DB_TYPE =~ /oracle/i) {
        #$sql = "SELECT TABLE_NAME FROM TABS WHERE TABLE_NAME='".uc($table_name)."'";
        $sql = "SELECT TABLE_NAME FROM TABS WHERE TABLE_NAME=:tablename";
        $sth = $dbh->prepare($sql);
        $sth->bind_param(":tablename",uc($table_name));
    } elsif($DB_TYPE =~ /postgres/i) {
        $sql = "SELECT table_name FROM information_schema.tables WHERE table_name = '".lc($table_name)."'";
        $sth = $dbh->prepare($sql);
	debug("SQL: $sql");
    }

    $dbh->{PrintError} = 0;
#    $sth = $dbh->prepare($sql);
    $rv = $sth->execute;

    if($rv) {
        my @rows = $sth->fetchrow_array();
        $num_rows = $#rows + 1;
    } else {
        $num_rows = 0;
    }
    $sth->finish;
    
    $timer_hash{'tableexists_time'} += clock_gettime() - $start_time;
    $timer_hash{'tableexists_num'}++;

    # set the error level back to normal
    $dbh->{PrintError} = $print_error_status;

    return $num_rows;
}

#
# set all interfaces for a device inactive
#
sub set_inactive($) {
	my ($rid) = @_;

	if($DB_TYPE =~ /postgres/i) {
	    $sql = "UPDATE interface set status='false' where rid='$rid'";
	} else {
	    $sql = "UPDATE interface set status='inactive' where rid='$rid'";
	}
	debug("SQL: $sql");
	my $sth = $dbh->prepare($sql)
		or die "Can't prepare $sql: $dbh->errstr\n";
	my $rv = $sth->execute
		or die "can't execute the query: $sth->errstr\n";

	return 1;
}

# Find an RTG interface id (iid) in the MySQL database.  If it doesn't
# exist, create a new entry.
sub find_interface_id($$$$) {
    ( $rid, $int, $desc, $speed ) = @_;
    my $sth;
    $desc =~ s/ +$//g;    #remove trailing whitespace
    $desc =~ s/\'/\'\'/g;
    if($DB_TYPE =~ /mysql/i) {
        $sql = "SELECT id, description,speed FROM interface WHERE rid=$rid AND name='$int'";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
        debug("SQL: $sql"); 
    } elsif($DB_TYPE =~ /oracle/i) {
        $sql = "SELECT id, description,speed FROM interface WHERE rid=$rid AND name='$int'";
        debug("SQLOLD: $sql");
        $sql = "SELECT id, description,speed FROM interface WHERE rid=:rid AND name=:name";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
        $sth->bind_param(":rid",$rid);
        $sth->bind_param(":name",$int);
        debug("SQL: $sql"); 
    } elsif($DB_TYPE =~ /postgres/i) {
        $sql = "SELECT id, description,speed FROM interface WHERE rid=$rid AND name='$int'";
        $sth = $dbh->prepare($sql)
            or die "Can't prepare $sql: $dbh->errstr\n";
        debug("SQL: $sql"); 
    }

    my $rv = $sth->execute
        or die "can't execute the query: $sth->errstr\n";
    
    @row = $sth->fetchrow_array();
    debug("SQL Got: [$row[0]] [$row[1]] [$row[2]]");
    $iid = $row[0];

    unless ( $iid > 0 ) {
        print "No id found for $int on device $rid...";
        $desc =~ s/\"/\\\"/g;    # Fix " in desc
        if($DB_TYPE =~ /mysql/i) {
            $sql = "INSERT INTO interface (id,name, rid, speed, description) VALUES(0,'$int', $rid, $speed, '$desc')";
        } elsif($DB_TYPE =~ /oracle/i) {
            $sql = "INSERT INTO interface (id,name, rid, speed, description) VALUES(interface_seq.nextval,'$int', $rid, $speed, '$desc')";
        } elsif($DB_TYPE =~ /postgres/i) {
            $sql = "INSERT INTO interface (name, rid, speed, description) VALUES('$int', $rid, $speed, '$desc')";
	}
        print "adding.\n";
        &sql_insert($sql);
        $iid = &find_interface_id( $rid, $int, $desc, $speed );
    }
    else {
        if ( $row[1] ne $desc ) {
            if($UPDATE_DESC) {
                $sql = "UPDATE interface SET description='$desc' WHERE id=$iid";
                &sql_insert($sql);
            } else {
                print "Interface description changed.\n";
                print "Was: \"$row[1]\"\n";
                print "Now: \"$desc\"\n";
                print "Suggest: UPDATE interface SET description='$desc' WHERE id=$iid\n";
            }
        }

        if($row[2] ne $speed) {
            if($UPDATE_SPEED) {
                $sql = "UPDATE interface SET speed='$speed' WHERE id=$iid";
                &sql_insert($sql);
            } else {
                print "Interface speed changed.\n";
                print "Was: \"$row[2]\"\n";
                print "Now: \"$speed\"\n";
                print "Suggest: UPDATE interface SET speed='$speed' WHERE id=$iid\n";
            }
        }

        if($SET_INACTIVE) {
	    if($DB_TYPE =~ /postgres/i) {
		$sql = "UPDATE interface set status='true' WHERE id=$iid";
	    } else {
		$sql = "UPDATE interface set status='active' WHERE id=$iid";
	    }
            &sql_insert($sql);	
        }
    }
    $sth->finish;
    return $iid;
}

sub process_classes(@) {
	@classes = @_;

        my $start_time = clock_gettime();
	# remove any duplicates
	map { $classlist{$_} = 1; } @classes;

	$bit=0; $value=1;
	foreach(sort keys %classlist) {
		$statbit{$_} = $bit;
		$statvalue{$_} = $value;
		debug("Added stat $_ with bit $bit and value $value");
		$value *=2;
		$bit++;
	}
        
        $timer_hash{'processclass_time'} += clock_gettime() - $start_time;
        $timer_hash{'processclass_num'}++;

#	$currentclass = $statvalue{'disk'} + $statvalue{'cpu'} + $statvalue{'network'};
#	has_class("network");
}

sub has_class($) {
	my $classname = shift;

	my $foundclass = 0;

        my $start_time = clock_gettime();

	#
	# we create a vector out of the current class value
	# and then turn it into a binary array, reversing it so
	# that bit order is the same order as in the original 
	# array. We then check to see if the bit location of the
	# requested class is set to 1, if so, we have already
	# added information for the requested class
	#
	vec($classvector,0,32) = $currentclass;
	my @bitlist = reverse split(//,unpack("B*",$classvector));
	if($bitlist[$statbit{$classname}] == 1) {
		debug("Class: $classname in $currentclass");
		$foundclass = 1;
	}
	else {	
		debug("Class: $classname not in $currentclass");
	}
        
        $timer_hash{'hasclass_time'} += clock_gettime() - $start_time;
        $timer_hash{'hasclass_num'}++;

	return $foundclass;
}

sub add_class($) {
	my $classname = shift;

        my $start_time = clock_gettime();

	unless(has_class($classname)) {
		debug("Class: adding $classname");
		$currentclass += $statvalue{$classname};
	}

        $timer_hash{'addclass_time'} += clock_gettime() - $start_time;
        $timer_hash{'addclass_num'}++;
}

sub hasoid($$$) {
	my $comm = shift;
	my $router = shift;
	my $mib = shift;

	# we don't want messages about not finding the oid, it might
	# confuse/concern people as alot of these will fail
	#
	$SNMP_Session::suppress_warnings=2;

	my @result = rtg_snmpget ("$comm\@$router", $mib);

	# turn warnings back on
	$SNMP_Session::suppress_warnings=0;

	if($result[0] eq "") {
		debug("SNMP: $sstat not on $router...");
		return 0;
	}
	else { return 1; }

}

sub rtg_snmpget($$) {
	my $routerpluscomm = shift;
	my $mib = shift;
        my @snmp_ret;

        my $start_time = clock_gettime();
	#return snmpget("$routerpluscomm:$snmp_port:$snmp_timeout:$snmp_retries:$snmp_backoff:$snmp_ver",$mib);
	print "snmpget($routerpluscomm:$snmp_port:$snmp_timeout:$snmp_retries:$snmp_backoff:$snmp_ver $mib)\n";
	@snmp_get = snmpget("$routerpluscomm:$snmp_port:$snmp_timeout:$snmp_retries:$snmp_backoff:$snmp_ver",$mib);
        my $end_time = clock_gettime();

        my $total_time = $end_time - $start_time;
        $timer_hash{'snmpget_time'} += $total_time;
        $timer_hash{'snmpget_num'}++;

        return @snmp_get;
}

sub getmoduleorder($%) {
	my $systemtype = shift;
	my %module_list = @_;;

	my %current_list;
	my @final_order;

	my $count = 0;
	foreach $module (sort keys %module_list) {
		$current_list{$module} = $count;
		$count += 10;
	}

	foreach $key (keys %order_mod) { 
		next unless(exists $module_list{$order_mod{$key}});
		if($systemtype =~ /$order_regex{$key}/) {
			debug("Changing order of $order_mod{$key} by $order_change{$key}...");
			$current_list{$order_mod{$key}} += $order_change{$key};
		}
	}

	foreach $module (sort { $current_list{$a} <=> $current_list{$b} } keys %current_list) {
			push(@final_order,$module);
	}

	return @final_order;

}

sub create_graphing_tables() {

    my $start_time = clock_gettime();
    my $sth;

    print "Updating graphing table data...\n" if $INFO;

    unless(grep /mapping_table/i, @table_list) {
        $sql = "CREATE TABLE mapping_table \
            (graphname VARCHAR(64) NOT NULL, tablename VARCHAR(64) NOT NULL )";
        &sql_insert($sql);
        $sql = "CREATE INDEX mapping_graph_idx on mapping_table(graphname)";
        &sql_insert($sql);
        $sql = "CREATE INDEX mapping_table_idx on mapping_table(tablename)";
        &sql_insert($sql);
    }

    unless(grep /options_table/i, @table_list) {
        $sql = "CREATE TABLE options_table \
            (graphname VARCHAR(64) NOT NULL, options VARCHAR(128) NOT NULL, \
            class VARCHAR(32) NOT NULL )";
        &sql_insert($sql);
        $sql = "CREATE INDEX options_graphname_idx on options_table(graphname)";
        &sql_insert($sql);
        $sql = "CREATE INDEX options_options_idx on options_table(options)";
        &sql_insert($sql);
        $sql = "CREATE INDEX options_class_idx on options_table(class)";
        &sql_insert($sql);
    }

    foreach $graph (sort keys %table_map) {
        $sql = "DELETE FROM mapping_table WHERE graphname='$graph'";
        &sql_insert($sql);

        if($DB_TYPE =~ /mysql/i) {
            $sql = "SELECT * FROM options_table where graphname='$graph'";
            debug("SQL: $sql");
            $sth = $dbh->prepare($sql)
                or die "Can't prepare $sql: $dbh->errstr\n";
        } elsif($DB_TYPE =~ /oracle/i) {
            $sql = "SELECT * FROM options_table where graphname=:graph";
            debug("SQL: $sql");
            $sth = $dbh->prepare($sql)
                or die "Can't prepare $sql: $dbh->errstr\n";
            $sth->bind_param(":graph",$graph);
        } elsif($DB_TYPE =~ /postgres/i) {
            $sql = "SELECT * FROM options_table where graphname='$graph'";
            debug("SQL: $sql");
            $sth = $dbh->prepare($sql)
                or die "Can't prepare $sql: $dbh->errstr\n";
	}
        my $rv = $sth->execute
            or die "can't execute the query: $sth->errstr\n";
        my @rows = $sth->fetchall_arrayref();
        if ( $sth->rows == 0 ) {
            $sql = "INSERT INTO options_table VALUES ('$graph','@{$table_options{$graph}}','$table_class{$graph}')";
            &sql_insert($sql);
        } 
        else {
            if($row[1] ne join(@{$table_options{$graph}}) || $row[2] ne $table_class{$graph}) {
                $sql = "UPDATE options_table SET options='".join(" ",@{$table_options{$graph}})."',class='$table_class{$graph}' WHERE graphname='$graph'";
                &sql_insert($sql);
            }
        }

        foreach $table (@{$table_map{$graph}}) {
            $sql = "SELECT * FROM mapping_table WHERE graphname='$graph' AND tablename='$table'";
            debug("SQL: $sql");
            $sth = $dbh->prepare($sql)
                or die "Can't prepare $sql: $dbh->errstr\n";
            my $rv = $sth->execute
                or die "can't execute the query: $sth->errstr\n";
            my @rows = $sth->fetchall_arrayref();
            if ( $sth->rows == 0 ) {
                print "No row found for $graph and $table, adding...\n" if $INFO;
                $sql = "INSERT INTO mapping_table VALUES ('$graph','$table')";
                &sql_insert($sql);
            }
            else {
                print "ERROR! Found duplicate $graph and $table\n";
            }
        }
        $sth->finish;
    }

    $timer_hash{'graphingtable_time'} = clock_gettime() - $start_time;

    return 0;
}


sub main {
    #
    # initial the classes vector information
    #
    process_classes(@statclasses);

    if($TARGETTYPE >= 0.8) {
	    $router_p = 0;
	    $bits_p = 1;
	    $ver_p = 2;
	    $comm_p = 3;
    } else {
	    $router_p = 0;
	    $comm_p = 1;
	    $bits_p = 2;
    }

    open ROUTERS, "<$router_file" or die "Could not open file: $router_file";
    while (<ROUTERS>) {
        chomp;
        s/ +$//g;    #remove space at the end of the line
        next if /^ *\#/;    #ignore comment lines
        next if /^ *$/;     #ignore empty lines
	my @vals = split(":",$_);
	if($#vals > 0) {
		$r = $vals[$router_r];
		$communities{$r} = $community;
		$snmp_hash{$r} = $snmp_ver;
            	push @routers, $vals[$router_p];

		if($vals[$bits_p] ne "") { $counterBits{$r} = $vals[$bits_p]; } 
		if($vals[$ver_p] ne "") { $snmp_hash{$r} = $vals[$ver_p]; } 
		if($vals[$comm_p] ne "") { $communities{$r} = $vals[$comm_p]; } 
	} else {
		$communities{$_} = $community;
		$snmp_hash{$_} = $snmp_ver;
            	push @routers, $_;
	}
    }
    close ROUTERS;

    open(MODULES, "$MODULEORDERFILE") || die "Can't open file $MODULEORDERFILE: $!\n"; 
    while(<MODULES>) {
	chomp;
	s/ +$//g;    #remove space at the end of the line
	next if /^ *\#/;    #ignore comment lines
	next if /^ *$/;     #ignore empty lines

	my($mod,$regex,$poschg) = /(.+):(.+):([+-]\d+)/;

	if($poschg eq "") {
		debug("ERROR: Ignoring order line $_...");

	} else {
		$order_mod{"$mod--$regex"} = $mod;
		$order_regex{"$mod--$regex"} = $regex;
		$order_change{"$mod--$regex"} = $poschg;
	}
    }

    close(MODULES);

    if ( $routers[0] eq "rtr-1.my.net" ) {
        print "\n** Error, $0 is not yet configured\n\n";
        print "Please edit the \"$router_file\" file and add network devices\n";
        exit(-1);
    }

    # SQL Database Handle
    if ( !$DBOFF ) {
        if($DB_TYPE =~ /mysql/i) {
            $dbh = DBI->connect("DBI:mysql:$db_db:host=$db_host",$db_user,$db_pass) ||
                die "Could not connect to database ($db_db) on $db_host: $DBI::errstr\n";
            $sql = "SET SESSION storage_engine='$STORAGE_TYPE'";
            &sql_insert($sql);
            $sql = "SET SESSION table_type='$STORAGE_TYPE'";
            &sql_insert($sql);

        } elsif($DB_TYPE =~ /oracle/i) {
            $dbh = DBI->connect("DBI:Oracle:host=$db_host;sid=$db_db;port=1525",$db_user, $db_pass, {AutoCommit => 1}) ||
                die "Uable to connect to $db_host [$db_db][$db_user]: $DBI::errstr\n";
           debug("yay! we connected to Oracle [$db_host][$db_db][$db_user]!!!!");
           $dbh->{RaiseError} = 1;
           $dbh->{RowCacheSize} = 16;

        } elsif($DB_TYPE =~ /postgres/i) {
	    $dbh = DBI->connect("DBI:Pg:dbname=$db_db;host=$db_host",$db_user,$db_pass);
        } else {
            die "You have no database type....\n";
        }

       if (!$dbh) {
          print "Could not connect to database ($db_db) on $db_host.\n";
          print "Check configuration.\n";
          exit(-1);
       }
    }

    if($DB_TYPE =~ /oracle/i) {
        $sql = "SELECT TABLE_NAME FROM TABS";
    } elsif($DB_TYPE =~ /mysql/i) {
        $sql = "SET SESSION sql_mode='ANSI'";
        &sql_insert($sql);
        $sql = "SHOW TABLES";
    } elsif($DB_TYPE =~ /postgres/i) {
        $sql = "SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'";
    }

    $sth = $dbh->prepare($sql);
    $sth->execute;
    while ( @table_name = $sth->fetchrow_array()) {
        push(@table_list,$table_name[0]);
        debug("adding $table_name[0] to table_list");
    }
    

    open CFG, ">$tempfile" or die "Could not open file $tempfile: $!";
    ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime( time() );
    printf CFG "# Generated %02d/%02d/%02d %02d:%02d by $0\n", $mon + 1, $mday,
      $year + 1900, $hour, $min;
   
    if($CREATE_TABLE2IID) {
        unless(grep /table2iid_mapping/i, @table_list) {
            $sql = "CREATE TABLE table2iid_mapping \
                (tablename VARCHAR(64) NOT NULL, id INT NOT NULL, dtime INT NOT NULL)";
#                INDEX tablename_idx(tablename), INDEX id_idx(id))";
            &sql_insert($sql);
            $sql = "CREATE INDEX table2iid_tablename_idx on table2iid_mapping(tablename)";
            &sql_insert($sql);
            $sql = "CREATE INDEX table2iid_id_idx on table2iid_mapping(id)";
            &sql_insert($sql);
        }
    }

    if($STORETARGETINSQL) {
        debug("Creating oid_table...");
        unless(grep /oid_table/i, @table_list) {
            $sql = "CREATE TABLE oid_table \
                (rid INT NOT NULL, oid VARCHAR(128) NOT NULL, bits INT NOT NULL, tablename VARCHAR(128) NOT NULL, \
                id INT NOT NULL, speed VARCHAR(64) NOT NULL, descr VARCHAR(512) NOT NULL)";
            &sql_insert($sql);
            $sql = "CREATE INDEX oid_table_idx on oid_table(rid)";
            &sql_insert($sql);
        }

        debug("Creating router_snmp_table...");
        unless(grep /router_snmp_table/i, @table_list) {
            $sql = "CREATE TABLE router_snmp_table \
                (rid INT NOT NULL, hostname VARCHAR(128) NOT NULL, ip VARCHAR(64) NOT NULL,community VARCHAR(128) NOT NULL, \
                snmpver VARCHAR(12) NOT NULL)";
            &sql_insert($sql);
            $sql = "CREATE INDEX router_snmp_table_idx on router_snmp_table(rid)";
            &sql_insert($sql);
        }

        if(!$UPDATETARGETS) {
            debug("Removing all entries from oid_table and router_snmp_table...");
            $sql = "DELETE FROM oid_table WHERE rid > 0";
            &sql_insert($sql);
            $sql = "DELETE FROM router_snmp_table WHERE rid > 0";
            &sql_insert($sql);
        }
    }


    foreach $router (@routers) {

	if($PING_HOSTS && $PING_HOSTS ne "none") {
		my $p = Net::Ping->new($PING_HOSTS);

		unless($p->ping($router)){
			print "ERROR! $router is not pingable, skipping...\n";
			next;
		}

		$p->close();
	}

	# set snmp_ver
    	$snmp_ver = $snmp_hash{$router};
        $bits = getrouterbits{$router};
        # Sanity check bits
        $bits = $defbits if ( ( $bits != 32 ) && ( $bits != 64 ) );

	# This is really ugly, but not sure about a better way to
	# handle this. This entire fallback section could probably
	# use some work, or maybe not. It does work tho...
	my %snmp_trial_hash = ();
	
	# whatever we have $snmp_ver set to, mark is as active in our
	# trial hash
	$snmp_trial_hash{$snmp_ver} = 1;

	# if we want to enable fall back, we add in version 1
	if($SNMP_FALL_BACK) { $snmp_trial_hash{'1'} = 1; }

	

	# lets go thru all versions of SNMP to try in decending order
	foreach $our_snmp_ver (reverse sort keys %snmp_trial_hash) {
		$snmp_ver = $our_snmp_ver;
print localtime()."\n";		
	        print "Poking $router ($communities{$router}) ($bits bit) using SNMPv$our_snmp_ver...\n" if $INFO;

		$SNMP_Session::suppress_warnings=2;
		@result = rtg_snmpget( "$communities{$router}\@$router", 'sysDescr' );
		$SNMP_Session::suppress_warnings=0;
print "result: ".join(":",@result)."\n";

print localtime()."\n";		
		$system = join ( ' ', @result );
		if ( $system =~ /.*Cisco.*WS-.*/ ) {
			$system = "Catalyst";
		}
		last if($result[0] ne "");
	}

	if($system eq "") {
		print "$router is not responding to snmp, skipping...\n" if $INFO;
		next;
	}
	debug("System: $system");
	
	
	unless($DBOFF) {
		$rid = find_router_id($router);
		if($SET_INACTIVE) {
			print "Setting all interfaces for $router inactive...\n" if $INFO;
			set_inactive($rid);

		}
		$system_iid = find_interface_id($rid,'sysDescr',$system,0);
	}

	$session = SNMP_Session->open( $router, $communities{$router}, 161 )
       		   || die "Error opening SNMP session to $router";
#	if($snmp_ver == 2) {
#		$session = SNMPv2c_Session->open( $router, $communities{$router}, 161 )
#                   || die "Error opening SNMP session to $router";
#	} else {
#		$session = SNMP_Session->open( $router, $communities{$router}, 161 )
#       		   || die "Error opening SNMP session to $router";
#	}
	
        debug("store target in sql is: $STORETARGETINSQL");
        if($STORETARGETINSQL) {
            $rid = find_router_id($router);
            ($a,$a,$a,$a,@addrs) = gethostbyname($router);
            $ip = sprintf("%d.%d.%d.%d", unpack('C4',$addrs[0]));

            $sql = "SELECT * from router_snmp_table where rid=$rid";
            $sth = $dbh->prepare($sql);
            $sth->execute;

            my @rows = $sth->fetchall_arrayref();
            if ($sth->rows == 0) {
                $sql = "INSERT INTO router_snmp_table (rid,hostname,ip,community,snmpver) VALUES \
                    ($rid,'$router','$ip','$communities{$router}','$snmp_ver')";
            } else {
                $sql = "UPDATE router_snmp_table SET ip='$ip',community='$communities{$router}', snmpver='$snmp_ver' \
                    WHERE rid=$rid";
            }
            &sql_insert($sql);
            
            debug("Removing all entries for router $router in oid_table...");
            $sql = "DELETE FROM oid_table WHERE rid=$rid";
            &sql_insert($sql);

        } else {
            if($TARGETTYPE >= 0.8) {
                ($a,$a,$a,$a,@addrs) = gethostbyname($router);
                print CFG "# $router\n";
                printf CFG "host %d.%d.%d.%d {\n", unpack('C4',$addrs[0]);
                print CFG "\tcommunity $communities{$router};\n";
                print CFG "\tsnmpver $snmp_ver;\n";
            } else {
                print CFG "# Host\tOID\tBits\tCommunity\tTable\tID\tDescription\n";
            }
        }

	debug("Checking for modules information...");

	@module_ordering = getmoduleorder($system,%snmp_modules);
	
	$currentclass = 0;

	@found_mods = ();
	#foreach $mod_name (sort keys %snmp_modules) {
	print "Looking for stats on $router...\n" if $INFO;
	foreach $mod_name (@module_ordering) {
		# we will have failures, suppress warnings to make output cleaner
		debug("Checking for $mod_name support");

		# we don't want messages about not finding the oid, it might
		# confuse/concern people as alot of these will fail
		#
		$SNMP_Session::suppress_warnings=2;

	 	@result = rtg_snmpget ("$communities{$router}\@$router", $snmp_modules{$mod_name});

		# turn warnings back on
		$SNMP_Session::suppress_warnings=0;

		if($result[0] ne "") {
                        my $start_time = clock_gettime();
			debug("Class: $currentclass");
			$module_func = "process_module_$mod_name";
			&$module_func($router,$communities{$router},$session);
			push(@found_mods,$mod_name);
                        $timer_hash{$mod_name."_time"} += clock_gettime() - $start_time;
                        $timer_hash{$mod_name."_num"}++;
		}
		debug("Class: $currentclass");

	}
	print "Found support for modules @found_mods.\n" if $INFO;
	
	if($TARGETTYPE >= 0.8 && !$STORETARGETINSQL) {
		print CFG "};\n";
	}
    }

    #
    # Are we creating the graphing table?
    #
    if($CREATE_GRAPHING_TABLES) {
        create_graphing_tables();
    }

    #
    # Make the cfg file out of stored SQL tables if
    # we are using this option
    # 
    if($STORETARGETINSQL) {
        create_target_from_sql();
    }

    close CFG;

    print "Copying temp output file to final location...\n" if $INFO;
    move("$tempfile",$output);
    print "Done.\n";

    if($TIMINGDEBUG) {
        $timer_hash{'app_runtime'} = clock_gettime() - $timer_hash{'app_runtime'};
        foreach(sort keys %timer_hash) {
            debug("$_ was $timer_hash{$_}");
        }
    }
    
    if ( !$DBOFF ) {
        $dbh->disconnect;
    }
}

main;
exit(0);
